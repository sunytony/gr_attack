# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_attack_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_attack_swig')
    _attack_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_attack_swig', [dirname(__file__)])
        except ImportError:
            import _attack_swig
            return _attack_swig
        try:
            _mod = imp.load_module('_attack_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _attack_swig = swig_import_helper()
    del swig_import_helper
else:
    import _attack_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now() -> "gr::high_res_timer_type":
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _attack_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _attack_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _attack_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _attack_swig.high_res_timer_epoch()
class random_periodic_source(object):
    """
    <+description of block+>

    Constructor Specific Documentation:



    Args:
        msg_len : 
        interval : 
        num_msg : 
        quit : 
        debug : 
        seed : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(msg_len: 'int', interval: 'long', num_msg: 'int'=1, quit: 'bool'=True, debug: 'bool'=False, seed: 'int'=0) -> "gr::attack::random_periodic_source::sptr":
        """
        make(int msg_len, long interval, int num_msg=1, bool quit=True, bool debug=False, int seed=0) -> random_periodic_source_sptr

        <+description of block+>

        Constructor Specific Documentation:



        Args:
            msg_len : 
            interval : 
            num_msg : 
            quit : 
            debug : 
            seed : 
        """
        return _attack_swig.random_periodic_source_make(msg_len, interval, num_msg, quit, debug, seed)

    make = staticmethod(make)

    def set_nmsg(self, nmsg: 'int') -> "void":
        """set_nmsg(random_periodic_source self, int nmsg)"""
        return _attack_swig.random_periodic_source_set_nmsg(self, nmsg)


    def get_nmsg(self) -> "int":
        """get_nmsg(random_periodic_source self) -> int"""
        return _attack_swig.random_periodic_source_get_nmsg(self)


    def set_delay(self, delay: 'long') -> "void":
        """set_delay(random_periodic_source self, long delay)"""
        return _attack_swig.random_periodic_source_set_delay(self, delay)


    def get_delay(self) -> "long":
        """get_delay(random_periodic_source self) -> long"""
        return _attack_swig.random_periodic_source_get_delay(self)


    def start_tx(self) -> "void":
        """start_tx(random_periodic_source self)"""
        return _attack_swig.random_periodic_source_start_tx(self)


    def stop_tx(self) -> "void":
        """stop_tx(random_periodic_source self)"""
        return _attack_swig.random_periodic_source_stop_tx(self)


    def is_running(self) -> "bool":
        """is_running(random_periodic_source self) -> bool"""
        return _attack_swig.random_periodic_source_is_running(self)

    __swig_destroy__ = _attack_swig.delete_random_periodic_source
    __del__ = lambda self: None
random_periodic_source_swigregister = _attack_swig.random_periodic_source_swigregister
random_periodic_source_swigregister(random_periodic_source)

def random_periodic_source_make(msg_len: 'int', interval: 'long', num_msg: 'int'=1, quit: 'bool'=True, debug: 'bool'=False, seed: 'int'=0) -> "gr::attack::random_periodic_source::sptr":
    """
    random_periodic_source_make(int msg_len, long interval, int num_msg=1, bool quit=True, bool debug=False, int seed=0) -> random_periodic_source_sptr

    <+description of block+>

    Constructor Specific Documentation:



    Args:
        msg_len : 
        interval : 
        num_msg : 
        quit : 
        debug : 
        seed : 
    """
    return _attack_swig.random_periodic_source_make(msg_len, interval, num_msg, quit, debug, seed)

class random_periodic_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::attack::random_periodic_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::attack::random_periodic_source)> self) -> random_periodic_source_sptr
        __init__(boost::shared_ptr<(gr::attack::random_periodic_source)> self, random_periodic_source p) -> random_periodic_source_sptr
        """
        this = _attack_swig.new_random_periodic_source_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::attack::random_periodic_source *":
        """__deref__(random_periodic_source_sptr self) -> random_periodic_source"""
        return _attack_swig.random_periodic_source_sptr___deref__(self)

    __swig_destroy__ = _attack_swig.delete_random_periodic_source_sptr
    __del__ = lambda self: None

    def make(self, msg_len: 'int', interval: 'long', num_msg: 'int'=1, quit: 'bool'=True, debug: 'bool'=False, seed: 'int'=0) -> "gr::attack::random_periodic_source::sptr":
        """
        make(random_periodic_source_sptr self, int msg_len, long interval, int num_msg=1, bool quit=True, bool debug=False, int seed=0) -> random_periodic_source_sptr

        <+description of block+>

        Constructor Specific Documentation:



        Args:
            msg_len : 
            interval : 
            num_msg : 
            quit : 
            debug : 
            seed : 
        """
        return _attack_swig.random_periodic_source_sptr_make(self, msg_len, interval, num_msg, quit, debug, seed)


    def set_nmsg(self, nmsg: 'int') -> "void":
        """set_nmsg(random_periodic_source_sptr self, int nmsg)"""
        return _attack_swig.random_periodic_source_sptr_set_nmsg(self, nmsg)


    def get_nmsg(self) -> "int":
        """get_nmsg(random_periodic_source_sptr self) -> int"""
        return _attack_swig.random_periodic_source_sptr_get_nmsg(self)


    def set_delay(self, delay: 'long') -> "void":
        """set_delay(random_periodic_source_sptr self, long delay)"""
        return _attack_swig.random_periodic_source_sptr_set_delay(self, delay)


    def get_delay(self) -> "long":
        """get_delay(random_periodic_source_sptr self) -> long"""
        return _attack_swig.random_periodic_source_sptr_get_delay(self)


    def start_tx(self) -> "void":
        """start_tx(random_periodic_source_sptr self)"""
        return _attack_swig.random_periodic_source_sptr_start_tx(self)


    def stop_tx(self) -> "void":
        """stop_tx(random_periodic_source_sptr self)"""
        return _attack_swig.random_periodic_source_sptr_stop_tx(self)


    def is_running(self) -> "bool":
        """is_running(random_periodic_source_sptr self) -> bool"""
        return _attack_swig.random_periodic_source_sptr_is_running(self)


    def history(self) -> "unsigned int":
        """history(random_periodic_source_sptr self) -> unsigned int"""
        return _attack_swig.random_periodic_source_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(random_periodic_source_sptr self, int which, int delay)
        declare_sample_delay(random_periodic_source_sptr self, unsigned int delay)
        """
        return _attack_swig.random_periodic_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(random_periodic_source_sptr self, int which) -> unsigned int"""
        return _attack_swig.random_periodic_source_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(random_periodic_source_sptr self, int multiple)"""
        return _attack_swig.random_periodic_source_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(random_periodic_source_sptr self) -> int"""
        return _attack_swig.random_periodic_source_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(random_periodic_source_sptr self) -> double"""
        return _attack_swig.random_periodic_source_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(random_periodic_source_sptr self) -> uint64_t"""
        return _attack_swig.random_periodic_source_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(random_periodic_source_sptr self) -> uint64_t"""
        return _attack_swig.random_periodic_source_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(random_periodic_source_sptr self) -> bool"""
        return _attack_swig.random_periodic_source_sptr_start(self)


    def stop(self) -> "bool":
        """stop(random_periodic_source_sptr self) -> bool"""
        return _attack_swig.random_periodic_source_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(random_periodic_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _attack_swig.random_periodic_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(random_periodic_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _attack_swig.random_periodic_source_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(random_periodic_source_sptr self, std::string level)"""
        return _attack_swig.random_periodic_source_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(random_periodic_source_sptr self) -> std::string"""
        return _attack_swig.random_periodic_source_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(random_periodic_source_sptr self) -> int"""
        return _attack_swig.random_periodic_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(random_periodic_source_sptr self, int m)"""
        return _attack_swig.random_periodic_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(random_periodic_source_sptr self)"""
        return _attack_swig.random_periodic_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(random_periodic_source_sptr self) -> bool"""
        return _attack_swig.random_periodic_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(random_periodic_source_sptr self, int m)"""
        return _attack_swig.random_periodic_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(random_periodic_source_sptr self) -> int"""
        return _attack_swig.random_periodic_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(random_periodic_source_sptr self, int i) -> long"""
        return _attack_swig.random_periodic_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(random_periodic_source_sptr self, long max_output_buffer)
        set_max_output_buffer(random_periodic_source_sptr self, int port, long max_output_buffer)
        """
        return _attack_swig.random_periodic_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(random_periodic_source_sptr self, int i) -> long"""
        return _attack_swig.random_periodic_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(random_periodic_source_sptr self, long min_output_buffer)
        set_min_output_buffer(random_periodic_source_sptr self, int port, long min_output_buffer)
        """
        return _attack_swig.random_periodic_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(random_periodic_source_sptr self) -> float"""
        return _attack_swig.random_periodic_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(random_periodic_source_sptr self) -> float"""
        return _attack_swig.random_periodic_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(random_periodic_source_sptr self) -> float"""
        return _attack_swig.random_periodic_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(random_periodic_source_sptr self) -> float"""
        return _attack_swig.random_periodic_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(random_periodic_source_sptr self) -> float"""
        return _attack_swig.random_periodic_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(random_periodic_source_sptr self) -> float"""
        return _attack_swig.random_periodic_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(random_periodic_source_sptr self, int which) -> float
        pc_input_buffers_full(random_periodic_source_sptr self) -> pmt_vector_float
        """
        return _attack_swig.random_periodic_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(random_periodic_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(random_periodic_source_sptr self) -> pmt_vector_float
        """
        return _attack_swig.random_periodic_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(random_periodic_source_sptr self, int which) -> float
        pc_input_buffers_full_var(random_periodic_source_sptr self) -> pmt_vector_float
        """
        return _attack_swig.random_periodic_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(random_periodic_source_sptr self, int which) -> float
        pc_output_buffers_full(random_periodic_source_sptr self) -> pmt_vector_float
        """
        return _attack_swig.random_periodic_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(random_periodic_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(random_periodic_source_sptr self) -> pmt_vector_float
        """
        return _attack_swig.random_periodic_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(random_periodic_source_sptr self, int which) -> float
        pc_output_buffers_full_var(random_periodic_source_sptr self) -> pmt_vector_float
        """
        return _attack_swig.random_periodic_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(random_periodic_source_sptr self) -> float"""
        return _attack_swig.random_periodic_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(random_periodic_source_sptr self) -> float"""
        return _attack_swig.random_periodic_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(random_periodic_source_sptr self) -> float"""
        return _attack_swig.random_periodic_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(random_periodic_source_sptr self) -> float"""
        return _attack_swig.random_periodic_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(random_periodic_source_sptr self) -> float"""
        return _attack_swig.random_periodic_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(random_periodic_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _attack_swig.random_periodic_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(random_periodic_source_sptr self)"""
        return _attack_swig.random_periodic_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(random_periodic_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _attack_swig.random_periodic_source_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(random_periodic_source_sptr self) -> int"""
        return _attack_swig.random_periodic_source_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(random_periodic_source_sptr self) -> int"""
        return _attack_swig.random_periodic_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(random_periodic_source_sptr self, int priority) -> int"""
        return _attack_swig.random_periodic_source_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(random_periodic_source_sptr self) -> std::string"""
        return _attack_swig.random_periodic_source_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(random_periodic_source_sptr self) -> std::string"""
        return _attack_swig.random_periodic_source_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(random_periodic_source_sptr self) -> io_signature_sptr"""
        return _attack_swig.random_periodic_source_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(random_periodic_source_sptr self) -> io_signature_sptr"""
        return _attack_swig.random_periodic_source_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(random_periodic_source_sptr self) -> long"""
        return _attack_swig.random_periodic_source_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(random_periodic_source_sptr self) -> basic_block_sptr"""
        return _attack_swig.random_periodic_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(random_periodic_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _attack_swig.random_periodic_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(random_periodic_source_sptr self) -> std::string"""
        return _attack_swig.random_periodic_source_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(random_periodic_source_sptr self, std::string name)"""
        return _attack_swig.random_periodic_source_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(random_periodic_source_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _attack_swig.random_periodic_source_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(random_periodic_source_sptr self) -> swig_pmt_ptr"""
        return _attack_swig.random_periodic_source_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(random_periodic_source_sptr self) -> swig_pmt_ptr"""
        return _attack_swig.random_periodic_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(random_periodic_source_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _attack_swig.random_periodic_source_sptr_message_subscribers(self, which_port)

random_periodic_source_sptr_swigregister = _attack_swig.random_periodic_source_sptr_swigregister
random_periodic_source_sptr_swigregister(random_periodic_source_sptr)


random_periodic_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
random_periodic_source = random_periodic_source.make;

class modified_RAPP(object):
    """Proxy of C++ gr::attack::modified_RAPP class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args) -> "gr::attack::modified_RAPP::sptr":
        """
        make(double LinearGain, double PhaseGain, double Smoothness, double PhaseSmoothness, double OutputSL, double PhaseSaturation) -> modified_RAPP_sptr
        make() -> modified_RAPP_sptr
        """
        return _attack_swig.modified_RAPP_make(*args)

    make = staticmethod(make)
    __swig_destroy__ = _attack_swig.delete_modified_RAPP
    __del__ = lambda self: None
modified_RAPP_swigregister = _attack_swig.modified_RAPP_swigregister
modified_RAPP_swigregister(modified_RAPP)

def modified_RAPP_make(*args) -> "gr::attack::modified_RAPP::sptr":
    """
    make(double LinearGain, double PhaseGain, double Smoothness, double PhaseSmoothness, double OutputSL, double PhaseSaturation) -> modified_RAPP_sptr
    modified_RAPP_make() -> modified_RAPP_sptr
    """
    return _attack_swig.modified_RAPP_make(*args)

class modified_RAPP_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::attack::modified_RAPP)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::attack::modified_RAPP)> self) -> modified_RAPP_sptr
        __init__(boost::shared_ptr<(gr::attack::modified_RAPP)> self, modified_RAPP p) -> modified_RAPP_sptr
        """
        this = _attack_swig.new_modified_RAPP_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::attack::modified_RAPP *":
        """__deref__(modified_RAPP_sptr self) -> modified_RAPP"""
        return _attack_swig.modified_RAPP_sptr___deref__(self)

    __swig_destroy__ = _attack_swig.delete_modified_RAPP_sptr
    __del__ = lambda self: None

    def make(self, *args) -> "gr::attack::modified_RAPP::sptr":
        """
        make(modified_RAPP_sptr self, double LinearGain, double PhaseGain, double Smoothness, double PhaseSmoothness, double OutputSL, double PhaseSaturation) -> modified_RAPP_sptr
        make(modified_RAPP_sptr self) -> modified_RAPP_sptr
        """
        return _attack_swig.modified_RAPP_sptr_make(self, *args)


    def history(self) -> "unsigned int":
        """history(modified_RAPP_sptr self) -> unsigned int"""
        return _attack_swig.modified_RAPP_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(modified_RAPP_sptr self, int which, int delay)
        declare_sample_delay(modified_RAPP_sptr self, unsigned int delay)
        """
        return _attack_swig.modified_RAPP_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(modified_RAPP_sptr self, int which) -> unsigned int"""
        return _attack_swig.modified_RAPP_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(modified_RAPP_sptr self, int multiple)"""
        return _attack_swig.modified_RAPP_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(modified_RAPP_sptr self) -> int"""
        return _attack_swig.modified_RAPP_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(modified_RAPP_sptr self) -> double"""
        return _attack_swig.modified_RAPP_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(modified_RAPP_sptr self) -> uint64_t"""
        return _attack_swig.modified_RAPP_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(modified_RAPP_sptr self) -> uint64_t"""
        return _attack_swig.modified_RAPP_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(modified_RAPP_sptr self) -> bool"""
        return _attack_swig.modified_RAPP_sptr_start(self)


    def stop(self) -> "bool":
        """stop(modified_RAPP_sptr self) -> bool"""
        return _attack_swig.modified_RAPP_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(modified_RAPP_sptr self, unsigned int which_input) -> uint64_t"""
        return _attack_swig.modified_RAPP_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(modified_RAPP_sptr self, unsigned int which_output) -> uint64_t"""
        return _attack_swig.modified_RAPP_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(modified_RAPP_sptr self, std::string level)"""
        return _attack_swig.modified_RAPP_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(modified_RAPP_sptr self) -> std::string"""
        return _attack_swig.modified_RAPP_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(modified_RAPP_sptr self) -> int"""
        return _attack_swig.modified_RAPP_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(modified_RAPP_sptr self, int m)"""
        return _attack_swig.modified_RAPP_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(modified_RAPP_sptr self)"""
        return _attack_swig.modified_RAPP_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(modified_RAPP_sptr self) -> bool"""
        return _attack_swig.modified_RAPP_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(modified_RAPP_sptr self, int m)"""
        return _attack_swig.modified_RAPP_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(modified_RAPP_sptr self) -> int"""
        return _attack_swig.modified_RAPP_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(modified_RAPP_sptr self, int i) -> long"""
        return _attack_swig.modified_RAPP_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(modified_RAPP_sptr self, long max_output_buffer)
        set_max_output_buffer(modified_RAPP_sptr self, int port, long max_output_buffer)
        """
        return _attack_swig.modified_RAPP_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(modified_RAPP_sptr self, int i) -> long"""
        return _attack_swig.modified_RAPP_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(modified_RAPP_sptr self, long min_output_buffer)
        set_min_output_buffer(modified_RAPP_sptr self, int port, long min_output_buffer)
        """
        return _attack_swig.modified_RAPP_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(modified_RAPP_sptr self) -> float"""
        return _attack_swig.modified_RAPP_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(modified_RAPP_sptr self) -> float"""
        return _attack_swig.modified_RAPP_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(modified_RAPP_sptr self) -> float"""
        return _attack_swig.modified_RAPP_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(modified_RAPP_sptr self) -> float"""
        return _attack_swig.modified_RAPP_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(modified_RAPP_sptr self) -> float"""
        return _attack_swig.modified_RAPP_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(modified_RAPP_sptr self) -> float"""
        return _attack_swig.modified_RAPP_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(modified_RAPP_sptr self, int which) -> float
        pc_input_buffers_full(modified_RAPP_sptr self) -> pmt_vector_float
        """
        return _attack_swig.modified_RAPP_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(modified_RAPP_sptr self, int which) -> float
        pc_input_buffers_full_avg(modified_RAPP_sptr self) -> pmt_vector_float
        """
        return _attack_swig.modified_RAPP_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(modified_RAPP_sptr self, int which) -> float
        pc_input_buffers_full_var(modified_RAPP_sptr self) -> pmt_vector_float
        """
        return _attack_swig.modified_RAPP_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(modified_RAPP_sptr self, int which) -> float
        pc_output_buffers_full(modified_RAPP_sptr self) -> pmt_vector_float
        """
        return _attack_swig.modified_RAPP_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(modified_RAPP_sptr self, int which) -> float
        pc_output_buffers_full_avg(modified_RAPP_sptr self) -> pmt_vector_float
        """
        return _attack_swig.modified_RAPP_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(modified_RAPP_sptr self, int which) -> float
        pc_output_buffers_full_var(modified_RAPP_sptr self) -> pmt_vector_float
        """
        return _attack_swig.modified_RAPP_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(modified_RAPP_sptr self) -> float"""
        return _attack_swig.modified_RAPP_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(modified_RAPP_sptr self) -> float"""
        return _attack_swig.modified_RAPP_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(modified_RAPP_sptr self) -> float"""
        return _attack_swig.modified_RAPP_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(modified_RAPP_sptr self) -> float"""
        return _attack_swig.modified_RAPP_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(modified_RAPP_sptr self) -> float"""
        return _attack_swig.modified_RAPP_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(modified_RAPP_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _attack_swig.modified_RAPP_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(modified_RAPP_sptr self)"""
        return _attack_swig.modified_RAPP_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(modified_RAPP_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _attack_swig.modified_RAPP_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(modified_RAPP_sptr self) -> int"""
        return _attack_swig.modified_RAPP_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(modified_RAPP_sptr self) -> int"""
        return _attack_swig.modified_RAPP_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(modified_RAPP_sptr self, int priority) -> int"""
        return _attack_swig.modified_RAPP_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(modified_RAPP_sptr self) -> std::string"""
        return _attack_swig.modified_RAPP_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(modified_RAPP_sptr self) -> std::string"""
        return _attack_swig.modified_RAPP_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(modified_RAPP_sptr self) -> io_signature_sptr"""
        return _attack_swig.modified_RAPP_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(modified_RAPP_sptr self) -> io_signature_sptr"""
        return _attack_swig.modified_RAPP_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(modified_RAPP_sptr self) -> long"""
        return _attack_swig.modified_RAPP_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(modified_RAPP_sptr self) -> basic_block_sptr"""
        return _attack_swig.modified_RAPP_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(modified_RAPP_sptr self, int ninputs, int noutputs) -> bool"""
        return _attack_swig.modified_RAPP_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(modified_RAPP_sptr self) -> std::string"""
        return _attack_swig.modified_RAPP_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(modified_RAPP_sptr self, std::string name)"""
        return _attack_swig.modified_RAPP_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(modified_RAPP_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _attack_swig.modified_RAPP_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(modified_RAPP_sptr self) -> swig_pmt_ptr"""
        return _attack_swig.modified_RAPP_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(modified_RAPP_sptr self) -> swig_pmt_ptr"""
        return _attack_swig.modified_RAPP_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(modified_RAPP_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _attack_swig.modified_RAPP_sptr_message_subscribers(self, which_port)

modified_RAPP_sptr_swigregister = _attack_swig.modified_RAPP_sptr_swigregister
modified_RAPP_sptr_swigregister(modified_RAPP_sptr)


modified_RAPP_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
modified_RAPP = modified_RAPP.make;



